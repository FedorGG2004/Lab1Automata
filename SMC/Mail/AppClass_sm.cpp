//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//





#include "AppClass.h"
#include "AppClass_sm.h"

using namespace statemap;

// Static class declarations.
Map1_Start Map1::Start("Map1::Start", 0);
Map1_Mail Map1::Mail("Map1::Mail", 1);
Map1_Name Map1::Name("Map1::Name", 2);
Map1_At Map1::At("Map1::At", 3);
Map1_FirstOst Map1::FirstOst("Map1::FirstOst", 4);
Map1_Dot Map1::Dot("Map1::Dot", 5);
Map1_SecondOst Map1::SecondOst("Map1::SecondOst", 6);
Map1_Comma Map1::Comma("Map1::Comma", 7);
Map1_Error Map1::Error("Map1::Error", 8);
Map1_OK Map1::OK("Map1::OK", 9);

void AppClassState::EOS(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Reset(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Symbol(AppClassContext& context, char smb)
{
    Default(context);
}

void AppClassState::Default(AppClassContext& context)
{
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "TRANSITION   : Default"
            << std::endl;
    }

    throw (
        TransitionUndefinedException(
            (context.getState()).getName(),
            context.getTransition()));

}

void Map1_Default::Symbol(AppClassContext& context, char smb)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Default::Symbol(char smb)"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Default::Symbol(char smb)"
            << std::endl;
    }

    context.setState(Map1::Error);
    context.getState().Entry(context);


}

void Map1_Default::EOS(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Default::EOS()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Default::EOS()"
            << std::endl;
    }

    context.setState(Map1::Error);
    context.getState().Entry(context);


}

void Map1_Default::Reset(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Default::Reset()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : Map1::Default::Reset()"
            << std::endl;
    }

    context.setState(Map1::Start);
    context.getState().Entry(context);


}

void Map1_Start::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Start"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Start::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Acceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Start::EOS()"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }


}

void Map1_Start::Symbol(AppClassContext& context, char smb)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Start"
                << std::endl;
    }

    if (ctxt.isInMail(smb))
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::Start::Symbol(char smb)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.addSymbolToBuffer(smb);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::Start::Symbol(char smb)"
                    << std::endl;
            }

            context.setState(Map1::Mail);
        }
        catch (...)
        {
            context.setState(Map1::Mail);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::Symbol(context, smb);
    }


}

void Map1_Mail::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Mail"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Mail::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Acceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Mail::EOS()"
                << std::endl;
        }

        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Mail::Symbol(AppClassContext& context, char smb)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Mail"
                << std::endl;
    }

    if (ctxt.isInMail(smb))
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::Mail::Symbol(char smb)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.addSymbolToBuffer(smb);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::Mail::Symbol(char smb)"
                    << std::endl;
            }

            context.setState(Map1::Mail);
        }
        catch (...)
        {
            context.setState(Map1::Mail);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (!ctxt.mailNotEnded() && ctxt.isSymbol(smb))

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::Mail::Symbol(char smb)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.clearBuffer();
            ctxt.addSymbolToBuffer(smb);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::Mail::Symbol(char smb)"
                    << std::endl;
            }

            context.setState(Map1::Name);
        }
        catch (...)
        {
            context.setState(Map1::Name);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::Symbol(context, smb);
    }


}

void Map1_Name::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Name"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Name::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Acceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Name::EOS()"
                << std::endl;
        }

        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Name::Symbol(AppClassContext& context, char smb)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Name"
                << std::endl;
    }

    if (ctxt.isSymbol(smb) && ctxt.nameNotEnded())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::Name::Symbol(char smb)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.addSymbolToBuffer(smb);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::Name::Symbol(char smb)"
                    << std::endl;
            }

            context.setState(Map1::Name);
        }
        catch (...)
        {
            context.setState(Map1::Name);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.isAt(smb))

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::Name::Symbol(char smb)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.addAtMap();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::Name::Symbol(char smb)"
                    << std::endl;
            }

            context.setState(Map1::At);
        }
        catch (...)
        {
            context.setState(Map1::At);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::Symbol(context, smb);
    }


}

void Map1_At::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::At"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::At::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Acceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::At::EOS()"
                << std::endl;
        }

        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_At::Symbol(AppClassContext& context, char smb)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::At"
                << std::endl;
    }

    if (ctxt.isSymbol(smb))
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::At::Symbol(char smb)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.clearBuffer();
            ctxt.addSymbolToBuffer(smb);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::At::Symbol(char smb)"
                    << std::endl;
            }

            context.setState(Map1::FirstOst);
        }
        catch (...)
        {
            context.setState(Map1::FirstOst);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::Symbol(context, smb);
    }


}

void Map1_FirstOst::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::FirstOst"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::FirstOst::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Acceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::FirstOst::EOS()"
                << std::endl;
        }

        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_FirstOst::Symbol(AppClassContext& context, char smb)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::FirstOst"
                << std::endl;
    }

    if (ctxt.isSymbol(smb) && ctxt.firstOstNotEnded())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::FirstOst::Symbol(char smb)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.addSymbolToBuffer(smb);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::FirstOst::Symbol(char smb)"
                    << std::endl;
            }

            context.setState(Map1::FirstOst);
        }
        catch (...)
        {
            context.setState(Map1::FirstOst);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.isDot(smb))

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::FirstOst::Symbol(char smb)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.clearBuffer();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::FirstOst::Symbol(char smb)"
                    << std::endl;
            }

            context.setState(Map1::Dot);
        }
        catch (...)
        {
            context.setState(Map1::Dot);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::Symbol(context, smb);
    }


}

void Map1_Dot::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Dot"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Dot::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Acceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Dot::EOS()"
                << std::endl;
        }

        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Dot::Symbol(AppClassContext& context, char smb)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Dot"
                << std::endl;
    }

    if (ctxt.isSymbol(smb))
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::Dot::Symbol(char smb)"
                << std::endl;
        }

        // No actions.
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Dot::Symbol(char smb)"
                << std::endl;
        }

        context.setState(Map1::SecondOst);
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::Symbol(context, smb);
    }


}

void Map1_SecondOst::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::SecondOst"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::SecondOst::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Acceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::SecondOst::EOS()"
                << std::endl;
        }

        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_SecondOst::Symbol(AppClassContext& context, char smb)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::SecondOst"
                << std::endl;
    }

    if (ctxt.isSymbol(smb) && ctxt.secondOstNotEnded())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SecondOst::Symbol(char smb)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.addSymbolToBuffer(smb);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::SecondOst::Symbol(char smb)"
                    << std::endl;
            }

            context.setState(Map1::SecondOst);
        }
        catch (...)
        {
            context.setState(Map1::SecondOst);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.isComma(smb))

    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::SecondOst::Symbol(char smb)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.clearBuffer();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::SecondOst::Symbol(char smb)"
                    << std::endl;
            }

            context.setState(Map1::Comma);
        }
        catch (...)
        {
            context.setState(Map1::Comma);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::Symbol(context, smb);
    }


}

void Map1_Comma::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Comma"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Comma::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Comma::EOS()"
                << std::endl;
        }

        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);


}

void Map1_Comma::Symbol(AppClassContext& context, char smb)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Comma"
                << std::endl;
    }

    if (ctxt.isSymbol(smb))
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Map1::Comma::Symbol(char smb)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.addSymbolToBuffer(smb);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Map1::Comma::Symbol(char smb)"
                    << std::endl;
            }

            context.setState(Map1::Name);
        }
        catch (...)
        {
            context.setState(Map1::Name);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         Map1_Default::Symbol(context, smb);
    }


}

void Map1_Error::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : Map1::Error"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: Map1::Error::EOS()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.clearMap();
        ctxt.Unacceptable();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Map1::Error::EOS()"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }


}

//
// Local variables:
//  buffer-read-only: t
// End:
//
